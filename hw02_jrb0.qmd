---
title: "HW02"
author: "Jonathan Bachrach"
format: html
editor: visual
---

## Instructions

Complete the following exercises using the `lubridate` and `purrr` packages in R. Ensure that your solutions are optimized and use functional programming principles where applicable.

1.  Load the necessary libraries.
2.  Answer each question in separate R code chunks.
3.  Provide detailed explanations for your approach.
4.  Submit the rendered HTML file.

```{r}
library(tidyverse)
library(lubridate)
library(purrr)
```

## Exercise Functions:

### Question 1

Write a function (using r code and structure demonstrated in class) to calculate a z score for a given observed value, a mean, and a standard deviation value. And then use your function to find a z score for the following problem. (Research the internet to find the formula used to calculate a z score)\
Observed value = 25.77, mean = 23.54, standard deviation = 2.442

```{r}

z_score <- function(observed_value, mean, std_dev) {
  (observed_value - mean) / std_dev
}

z_score(observed_value = 25.77, mean = 23.54, std_dev = 2.442)
```

### Question 2

Write a function to calculate the natural log of a number multiplied by the common log of the same number divided by the cube root of a given prime number, $\dfrac{\ln x \times \log x }{\sqrt[3]{p}}$.\
Use your function to find the answer if the number to be used for both log expressions is 32 and the given prime number is 11, $x = 32, \;\;p=11$.\
Also use R code to round your answer to the nearest tenth

```{r}

log_calc <- function(x, p) {
  log(x) * log10(x) / (p ^ (1/3))
}

log_calc(32, 11)
```

### Question 3

Use and show R coding to calculate the standard deviation for each variable of the data table `mtcars` using the `Special For Loop Method`, which includes three components:

-   Output â€“ an object to store the results

-   Sequence â€“ the set of items to loop through

-   Body â€“ the operations performed in each iteration

```{r}

mtcars_st_devs <- vector(mode = "numeric", length = length(mtcars))

for (i in seq_along(mtcars_st_devs)) {
  mtcars_st_devs[[i]] <- sd(mtcars[[i]], na.rm = TRUE)
}

mtcars_st_devs
```

### Question 4:

Write only one line of the code to return only the leap years from years 2024, 3021, 2000 or 1800, 800, 5050, 600 and 7156. using subsetting with `[]` and without using built-in functions.

```{r}

years <- c(2024, 3021, 2000, 1800, 800, 5050, 600, 7156)

leap_years <- years[(years %% 400 == 0) | (years %% 4 == 0 & years %% 100 != 0)]

leap_years

```

## Advanced Date Manipulation with lubridate

### Question 5:

Generate a sequence of dates from **January 1, 2015** to **December 31, 2025**, spaced by every **two months**. Extract the **year**, **quarter**, and **ISO week number** for each date.

```{r}

#creates a vector with dates
dates <- seq(as.Date("2015/1/1"), as.Date("2025/1/1"), "2 months") 

#converts vector into date frame
dates_df <- tibble(date = dates)

#adds new colums to the date frame for year, quarter, and isoweek
dates_df <- dates_df %>% 
  mutate(year = year(date),
         quarter = quarter(date),
         week = isoweek(date))

#displays the data
dates_df 

```

### Question 6:

Given the following dates, compute the difference in **months** and **weeks** between each consecutive pair.

``` r
sample_dates <- c("2018-03-15", "2020-07-20", "2023-01-10", "2025-09-05")
```

```{r}
sample_dates <- c("2018-03-15", "2020-07-20", "2023-01-10", "2025-09-05")

#converts dates vector to ymd format
sample_dates <- ymd(sample_dates)

#creates vector with difference in days between consecutive dates
difference_in_days <- as.numeric(diff(sample_dates))

#calculates differences in months using interval + time_length
difference_in_months <- map2_dbl(
  sample_dates[-length(sample_dates)],
  sample_dates[-1],
  ~ time_length(interval(.x, .y), "months")
)

#creates data frame with weeks calculated by dividing days by 7 to save work
differences_df <- tibble(
  start_date = sample_dates[-length(sample_dates)],
  end_date = sample_dates[-1],
  difference_in_days = difference_in_days,
  difference_in_weeks = difference_in_days/7,
  difference_in_months = difference_in_months
)

differences_df
```

### Question 7: Higher-Order Functions with purrr

Using `map()` and `map_dbl()`, compute the **mean**, **median**, and **standard deviation** for each numeric vector in the following list:

``` r
num_lists <- list(c(4, 16, 25, 36, 49), c(2.3, 5.7, 8.1, 11.4), c(10, 20, 30, 40, 50))
```

```{r}
num_lists <- list(c(4, 16, 25, 36, 49), c(2.3, 5.7, 8.1, 11.4), c(10, 20, 30, 40, 50))

map_dbl(.x = num_lists, .f = mean)
map_dbl(.x = num_lists, .f = median)
map_dbl(.x = num_lists, .f = sd)

```

### Question 8: Combining lubridate and purrr

Given a list of mixed date formats, use `map()` and `possibly()` from `purrr` to safely convert them to **Date** format and extract the **month name**.

``` r
date_strings <- list("2023-06-10", "2022/12/25", "15-Aug-2021", "InvalidDate")
```

```{r}

date_strings <- list("2023-06-10", "2022/12/25", "15-Aug-2021", "InvalidDate")

#defines a parse_date_time function with arguments in order to pass to possibly()
parse_date_time_possibly <- function(x) { 
  parse_date_time(x, orders = c("ymd", "dmy"))
}

#applies previously created function to list of date_strings
date_strings <- date_strings %>% #
  map(possibly(parse_date_time_possibly ,otherwise = NA))

#creates a data frame with column list of dates using list
date_strings_df <- tibble(dates = as_datetime(unlist(date_strings)))

#extracts month from date and creates a new column for month
date_strings_df <- date_strings_df %>%htt
  mutate(
    month = month(dates)
  )

date_strings_df
```

## Submission

-   Save your Quarto file after completing each problem, render it, then stage and commit the changes.\

-   Include well-commented code and clear explanations.\

-   Make at least **one commit per question**.\

-   Submit the rendered file to **Canvas** and push it to your **GitHub repository**.\

-   Provide the link to your GitHub repository in the **Canvas gradebook** as a text submission.\

ðŸ”¹ **Each problem is worth 10 points.**\

ðŸ”¹ You will receive an additional **20 points** if you correctly push your completed file to GitHub and make at least one commit for each question.\

**Good luck!**
