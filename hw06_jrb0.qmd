---
title: "Homework Assignment: Sentiment Analysis of Emma"
format: html
editor: visual
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo       = TRUE, 
                      fig.align  = "center",
                      fig.height = 3, fig.width = 4)
ggplot2::theme_set(ggplot2::theme_bw() + ggplot2::theme(strip.background = ggplot2::element_rect(fill = "white")))
```

**Title**: Exploring Joyful Language in Jane Austen’s *Emma* using Tidytext

### **Instructions**

Complete the following exercises using the appropriate packages in R. Ensure that your solutions are optimized and use functional programming principles where applicable.

1.  Load the necessary libraries.
2.  Answer each question in separate R code chunks.
3.  Provide detailed explanations for your approach.
4.  Submit the rendered HTML file.

#### **Objective**:

Use the **`tidytext`** package and three different **sentiment lexicons** (`nrc`, `afinn`, `bing`) to explore **positive/joyful words** in *Emma* by Jane Austen. You will tokenize the text, apply sentiment filters, visualize frequent sentiment words using `ggplot2`, and create a word cloud.

### **Tasks**:

1.  **Data Preparation**

    -   Load the `austen_books()` dataset from the **`janeaustenr`** package.

    -   Group by book and detect chapter boundaries using regex.

    -   Create `linenumber` and `chapter` columns.

```{r}

library(janeaustenr)
library(dplyr)
library(stringr)
library(tidytext)
library(tidyverse)
library(tidyverse)
library(wordcloud)

data <- austen_books()

# use regex to detect chapters, add linenumber variable
data <- data %>%
  group_by(book) %>%
  mutate(
    chapter = cumsum(str_detect(text, regex("^chapter\\s+\\d+", ignore_case = TRUE))),
    linenumber = row_number()
  ) %>%
  ungroup()

# separate data set that filters for only book = emma 
emma_data <- austen_books() %>%
  filter(book == "Emma") %>%
  group_by(book) %>%
  mutate(
    chapter = cumsum(str_detect(text, regex("^chapter\\s+\\d+", ignore_case = TRUE))),
    linenumber = row_number()
  ) %>%
  ungroup() %>%
  unnest_tokens(word, text)

head(data, 20)

```

2.  **Tokenization**

-   Use `unnest_tokens()` to tokenize text into individual words.

```{r}

tokenized <- data %>%
  unnest_tokens(word, text)

head(tokenized, 20)
```

3.  **Sentiment Analysis**

-   Filter joy/positive words from **each** of the three sentiment lexicons:

    -   `nrc` (joy)
    -   `afinn` (positive scores ≥ 1)
    -   `bing` (positive)

-   Join each with *Emma*'s text and:

    -   Count word frequency.
    -   Filter for frequently occurring words (`n > 50`).
    -   Visualize using a **bar chart** (`ggplot2`) and a **word cloud** (`wordcloud`).

```{r}

# filter sentiment lexicons using assignment criteria
nrc <- get_sentiments("nrc") %>% filter(sentiment == "joy")
afinn <- get_sentiments("afinn") %>% filter(value >= 1)
bing <- get_sentiments("bing") %>% filter(sentiment == "positive")

# function to count the frequency of each word in the lexicons
count_freq <- function(data, lexicon) {
  data %>%
    inner_join(lexicon, by = "word") %>%
    count(word, sort = TRUE) %>%
    filter(n > 50)
}

# run function on emma_data for each lexicon
emma_nrc <- count_freq(emma_data, nrc)
emma_afinn <- count_freq(emma_data, afinn)
emma_bing <- count_freq(emma_data, bing)

# function to plot frequency
emma_plot_bar <- function(df, title) {
  ggplot(df, aes(x = reorder(word, n), y = n)) +
    geom_col() +
    coord_flip() +
    labs(title = title, x = "Word", y = "Frequency") +
    theme_minimal()
}

# run plot function for each lexicon
emma_plot_bar(emma_nrc, "Joy words - NRC - Emma")
emma_plot_bar(emma_afinn, "Positive words - AFINN - Emma")
emma_plot_bar(emma_bing, "Positive words - Bing - Emma")

# creat word clouds using wordcloud() function

wordcloud(words = emma_nrc$word, freq = emma_nrc$n)
wordcloud(words = emma_afinn$word, freq = emma_afinn$n)
wordcloud(words = emma_bing$word, freq = emma_bing$n)
```

4.  **Push to GitHub**

-   Push your complete R script (`.R` file) to a **GitHub repository**.

-   Your script should include:

    -   Data wrangling
    -   Sentiment filtering and joins
    -   Visualization code

-   You must include **at least 5 meaningful commits** to document your workflow.

------------------------------------------------------------------------

## **Rubric 100 Points**

| Category                                       | Points  |
|------------------------------------------------|---------|
| Step 1: Data wrangling (linenumber, chapter)   | 10      |
| Step 2: Tokenization                           | 10      |
| Step 3a: NRC sentiment analysis + plots        | 10      |
| Step 3b: AFINN sentiment analysis + plots      | 10      |
| Step 3c: BING sentiment analysis + plots       | 10      |
| Code readability, structure, and comments      | 10      |
| Word cloud for each lexicon                    | 20      |
| GitHub submission                              |         |
| Commit history (at least 5 meaningful commits) | 20      |
| **Total**                                      | **100** |

Good Luck!
